<?php

namespace Modules\Product\Entities;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Modules\Files\Entities\File;
use Modules\Initializer\Traits\SortTrait;
use Modules\Initializer\Traits\TableColumnsTrait;
use Modules\Initializer\Traits\CoreTrait;
use Cviebrock\EloquentSluggable\Sluggable;
use Modules\Initializer\Traits\ActiveTrait;
use Modules\Initializer\Scopes\ActiveScope;
use GeneaLabs\LaravelModelCaching\Traits\Cachable;

class ProductCategory extends Model
{
  use SoftDeletes, TableColumnsTrait, CoreTrait, SortTrait,  Sluggable, ActiveTrait, Cachable;

  protected $dates = ['deleted_at'];

  protected $guarded = ['computed'];

  public $hidden = ['remote_id'];

  public function getRules()
  {
    return [
      'title' => 'max:50'
    ];
  }

  public function sluggable(): array
  {
    return [
      'url_key' => [
        'source' => 'title'
      ]
    ];
  }

  protected $casts = [
    'computed' => 'collection'
  ];

  static public function load_all()
  {
    return true;
  }

  public function typeProducts()
  {
    return $this->hasMany(TypeProduct::class);
  }

  public function products()
  {
    return $this->hasMany(Product::class);
  }

  public function attributes()
  {
    return $this->morphToMany(Attribute::class, 'attributable');
  }

  public function files()
  {
    return $this->morphMany(File::class, 'fileable');
  }

  protected static function boot()
  {
    parent::boot();

    static::addGlobalScope(new ActiveScope);
  }

  /*protected static function boot()
  {
    parent::boot(); // TODO: Change the autogenerated stub

    static::pivotDetached(function ($model, $relationName, $pivotIds) {
      if($relationName == 'attributes') {
        foreach($povotIds as $attribute_id) {
          $attrubyteValue = AttributeValue::where('attribute_id', $attribute_id)->firstOrFail();
          $attrubyteValue->delete();
        }
      }
    });
  }*/
}
